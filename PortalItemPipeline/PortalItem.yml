# File: PortalItem-TemplateV2.yml
# Author: Thomas Dean (tdean1)
# Starter template for promoting a web map item


parameters:
- name: itemId
  type: string
- name: title
  type: string
- name: owner
  type: string
- name: folder
  type: string
- name: itemIdTest
  type: string
- name: itemIdProd
  type: string

- name: DeployToDev
  type: boolean
- name: buildId
  type: string

- name: envs
  type: object
  default:
    dev: DEV
    test: TEST
    prod: PROD


stages:

#  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. 
# | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
# | |   ______     | || | _____  _____ | || |     _____    | || |   _____      | || |  ________    | |
# | |  |_   _ \    | || ||_   _||_   _|| || |    |_   _|   | || |  |_   _|     | || | |_   ___ `.  | |
# | |    | |_) |   | || |  | |    | |  | || |      | |     | || |    | |       | || |   | |   `. \ | |
# | |    |  __'.   | || |  | '    ' |  | || |      | |     | || |    | |   _   | || |   | |    | | | |
# | |   _| |__) |  | || |   \ `--' /   | || |     _| |_    | || |   _| |__/ |  | || |  _| |___.' / | |
# | |  |_______/   | || |    `.__.'    | || |    |_____|   | || |  |________|  | || | |________.'  | |
# | |              | || |              | || |              | || |              | || |              | |
# | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
#  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' 

- stage: Build
  condition: eq(${{ parameters.DeployToDev }}, false)
  jobs:
  - job: makePortalItemReplacements
    displayName: Make Replacements

    variables:
      url: https://dev.enterprise.com/portal
      user: $(portalAdminUserName)
      pswd: $(portalAdminPassword.NP)
      buildscript: $(Build.Repository.LocalPath)/makePortalItemReplacements.py
      replacementsfilename: $(Build.Repository.LocalPath)/PortalItem.Replacements.json

    # Use the matrix strategy to expand this job into three jobs.
    strategy:
      maxParallel: 1
      matrix:
        dev:
          jobenv: DEV
        test:
          jobenv: TEST
        prod:
          jobenv: PROD

    # These steps will run for each environment.
    steps:
      - checkout: self
        submodules: true

      # Create a folder for the current environment in the artifact staging directory (e.g. "c:\agent_work\1\a\DEV").
      - bash: |
          set -e; set -x
          mkdir ${BUILD_ARTIFACTSTAGINGDIRECTORY}/${JOBENV}
        displayName: mkdir Build.ArtifactStagingDirectory/$(jobenv)

      # Print contents of directories for easy checking.
      - template: directory-status.yml

      # Run the build script inside a docker container.
      # The data.json, description.json & thumbnail.png produced by this script
      # will be published as artifacts.
      - bash: |
          set -x
          ARGS=(
            $BUILDSCRIPT
            --outputpath "${BUILD_ARTIFACTSTAGINGDIRECTORY}/${JOBENV}"
            --replacementsFile "$REPLACEMENTSFILENAME"
            --environment $JOBENV
            --gisUrl $URL
            --username $USER
            --password $PASSWORD
            --itemTitle "${{ parameters.title }}"
            --itemId "${{ parameters.itemId }}"
          )
          
          docker run --rm -i -w "$(Build.Repository.LocalPath)" -u 0:0 -v /srv/vsts-data:/srv/vsts-data:rw esridocker/arcgis-api-python-notebook python "${ARGS[@]}"
        displayName: "Run makePortalItemReplacements.py"
        env:
          PASSWORD: $(pswd)

      # We're ready to publish the environment folder as an artifact.
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)/$(jobenv) # Path to the folder or file you want to publish.
          artifactName: $(jobenv)


#  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. 
# | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
# | |  _______     | || |  _________   | || |   _____      | || |  _________   | || |      __      | || |    _______   | || |  _________   | |
# | | |_   __ \    | || | |_   ___  |  | || |  |_   _|     | || | |_   ___  |  | || |     /  \     | || |   /  ___  |  | || | |_   ___  |  | |
# | |   | |__) |   | || |   | |_  \_|  | || |    | |       | || |   | |_  \_|  | || |    / /\ \    | || |  |  (__ \_|  | || |   | |_  \_|  | |
# | |   |  __ /    | || |   |  _|  _   | || |    | |   _   | || |   |  _|  _   | || |   / ____ \   | || |   '.___`-.   | || |   |  _|  _   | |
# | |  _| |  \ \_  | || |  _| |___/ |  | || |   _| |__/ |  | || |  _| |___/ |  | || | _/ /    \ \_ | || |  |`\____) |  | || |  _| |___/ |  | |
# | | |____| |___| | || | |_________|  | || |  |________|  | || | |_________|  | || ||____|  |____|| || |  |_______.'  | || | |_________|  | |
# | |              | || |              | || |              | || |              | || |              | || |              | || |              | |
# | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
#  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' 


- ${{ each env in parameters.envs }}:
  - stage: release_${{ env.key }}
    displayName: Release ${{ env.value }}
    pool: GIS

    # Set conditions based on the current environment.
    ${{ if eq(env.value, 'DEV') }}:
      condition: and(eq(${{ parameters.DeployToDev }}, true), not(Canceled()))
    ${{ if eq(env.value, 'TEST') }}:
      condition: |
        and(
          or(
            in(dependencies.release_dev.result, 'Succeeded'),
            in(dependencies.release_dev.result, 'Skipped')
          ),
          not(Canceled())
        )
    ${{ if eq(env.value, 'PROD') }}:
      condition: and(in(dependencies.release_test.result, 'Succeeded'), not(Canceled()))

    # Set stage variables
    variables:

      user: $(portalAdminUserName)

      # Find the script in the source code (e.g. "c:\agent_work\1\s\promotePortalItem.py").
      releasescript: $(Build.Repository.LocalPath)/promotePortalItem.py

      # Set environment specific variables.
      ${{ if eq(env.key, 'dev') }}:
        url: https://dev.enterprise.com/portal
        pswd: $(portalAdminPassword.NP)
        itemId: ${{ parameters.itemId }}

      ${{ if eq(env.key, 'test') }}:
        url: https://test.enterprise.com/portal
        pswd: $(portalAdminPassword.NP)
        itemId: ${{ parameters.itemIdTest }}

      ${{ if eq(env.key, 'prod') }}:
        url: https://prod.enterprise.com/portal
        pswd: $(portalAdminPassword)
        itemId: ${{ parameters.itemIdProd }}

    jobs:
    # Use a 'deployment' job instead of a regular job to specify an Azure Environment.
    # Approvals and checks can be added to Azure Environments that are triggered by
    # deployment jobs for that environment.
    - deployment: promotePortalItem
      displayName: "Promote ${{ parameters.title }}"

      # This Azure Environment will be created if it doesn't already exist.
      # It can also be created beforehand through the Azure DevOps portal.
      environment: GIS-PortalItem-${{ env.value }}

      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                submodules: true

              # Standard: promote changes in DEV to TEST & PROD
              - ${{ if eq(parameters.DeployToDev, false) }}:
                - download: current
                  artifact: ${{ env.value }}

              # Roll back changes: promote changes from a previous build
              # to DEV, TEST & PROD
              - ${{ if eq(parameters.DeployToDev, true) }}:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    source: specific # Not artifacts produced by the current run
                    project: Williams
                    pipeline: $(Build.DefinitionName) # Current pipeline
                    runVersion: specific # Specific build
                    runId: ${{ parameters.buildId }}
                    artifact: ${{ env.value }} # Specific artifact
                    path: $(Pipeline.Workspace)/${{ env.value }} # Destination
                  displayName: "Download Build ${{ parameters.buildId }}"

              # Update the portal item description with the new release version.
              - bash: |
                  set -e
                  VERSION=$MAJOR.$MINOR.$BUILD_BUILDID
                  echo Version: $VERSION

                  echo old: $(python3 -m json.tool $PATH_TO_FILE | awk '/description/ {print}')
                   
                  # REGEX Search Pattern: d[dd].ddd[dd].dddd[dd] (e.g. d[dd]. --> 1 digit min, 3 digit max, followed by '.')
                  sed -i "s/[0-9]\{1,3\}\.[0-9]\{3,5\}\.[0-9]\{4,6\}/${VERSION}/" $PATH_TO_FILE
                  echo new: $(python3 -m json.tool $PATH_TO_FILE | awk '/description/ {print}')
                displayName: Replace Version
                env:
                  PATH_TO_FILE: $(Pipeline.Workspace)/${{ env.value }}/description.json

              # Print description.json for easy checking.
              - bash: set -x; python3 -m json.tool ${PIPELINE_WORKSPACE}/${{ env.value }}/description.json
                displayName: description.json

              - template: directory-status.yml
                parameters:
                  additionalDirs:
                    Pipeline_Workspace_${{ env.value }}: $(Pipeline.Workspace)/${{ env.value }}

              # Run the release script inside a docker container.
              - bash: |
                  set -e; set -x
                  ARGS=(
                    $RELEASESCRIPT
                    --artifactPath "${PIPELINE_WORKSPACE}/${{ env.value }}"
                    --owner "${{ parameters.owner }}"
                    --folder "${{ parameters.folder }}"
                    --gisUrlDestination $URL
                    --usernameDestination $USER
                    --passwordDestination $PASSWORD
                    --title "${{ parameters.title }}"
                    --itemId $ITEMID
                  )

                  docker run --rm -i -u 0:0 -v /srv/vsts-data:/srv/vsts-data:rw esridocker/arcgis-api-python-notebook python "${ARGS[@]}"
                displayName: "Run promotePortalItem.py"
                env:
                  PASSWORD: $(pswd)
